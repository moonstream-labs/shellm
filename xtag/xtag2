#!/bin/zsh
# xtag v2 - XML Tag Generation Utility
# Generates structured XML tags for documentation, code representation, and reasoning
# Usage: xtag [tag_names] [file ...]

#------------------------------------------------------------------------------
# Configuration and Environment Setup
#------------------------------------------------------------------------------
set -eo pipefail

# Global associative array for storing tag data
typeset -gA FILE_DATA

# Global associative array for storing tag types
typeset -gA TAG_TYPES

#------------------------------------------------------------------------------
# Help and Usage Information
#------------------------------------------------------------------------------
usage() {
    cat <<EOF
Usage: xtag [tag_names] [file ...]

Description: Generates XML tag structures for various purposes such as documentation, codebase representation, etc.
The generated content is copied to the clipboard.

EOF
    exit 0
}

#------------------------------------------------------------------------------
# Utility Functions
#------------------------------------------------------------------------------
# Format text with specified indentation
indent() {
    local content="$1"
    local levels="$2"
    local spaces=${(l:$((levels * 4)):: :)}
    print -r -- "$content" | sed "s/^/$spaces/"
}

# Handle error messages and exit
error_exit() {
    echo "Error: $1" >&2
    exit 1
}

# Load source contents and paths into FILE_DATA
load_src() {
    if [[ $# -ge 1 ]]; then
        for i in {1..$num_items}; do
            local src="$1"                  # Use $1 to get current argument
            FILE_DATA["full_path_$i"]=$(realpath "$src")
            FILE_DATA["src_$i"]=$(process_path "$src" "${FILE_DATA[path_depth]}")
            FILE_DATA["content_$i"]=$(<"$src")
            shift                           # Move to next argument
        done
    else
        # Handle empty case
        for i in {1..$num_items}; do
            FILE_DATA["src_$i"]=""
            FILE_DATA["content_$i"]=""
        done
    fi
}

# Load tag types from configuration file
# load_config() {
	
# }

# Process file paths based on depth parameter
process_path() {
    local filepath="$1"
    local depth="$2"
    
    [[ -e "$filepath" ]] || error_exit "File does not exist: $filepath"
    
    local full_path
    if ! full_path=$(realpath "$filepath" 2>/dev/null); then
        error_exit "Failed to resolve path: $filepath"
    fi
    
    if [[ $depth -eq 0 ]]; then
        basename "$full_path"
    else
        echo "$full_path" | sed -E "s/^.*((\/[^/]+){${depth}})$/\1/"
    fi
}

# Handle output to clipboard
handle_output() {
    local content="$1"
    print -r -- "$content" | pbcopy
    echo "Output copied to clipboard"
}

#------------------------------------------------------------------------------
# Tag Factory
#------------------------------------------------------------------------------

# The goal of the Tag Factory is to: 
# 1. Streamline tag structure generation into a single pipeline
# 2. Provide an interface for loading tag types from a configuration file
# 4. (LONG-TERM-GOAL) Create new tag types on the fly using CLI options and save to configuration file
# 3. (LONG-TERM-GOAL) Create a tag type registry for sharing tag types across projects

TAG_TYPES[type]="$tag_name"
TAG_TYPES[nested]=false
TAG_TYPES[nest_tag]=""
TAG_TYPES[nest_attr1]=" type=\"\""
TAG_TYPES[nest_attr2]=" id=\"\""
TAG_TYPES[core_tag]=""
TAG_TYPES[tag_attr1]=""
TAG_TYPES[tag_attr2]=""

tag_factory() {
	local nested=$TAG_TYPES[nested]
	local nest_tag=$TAG_TYPES[nest_tag]
	local nest_attr1=$TAG_TYPES[nest_attr1]
	local nest_attr2=$TAG_TYPES[nest_attr2]
	local core_tag=$TAG_TYPES[core_tag]
	local tag_attr1=$TAG_TYPES[tag_attr1]
	local tag_attr2=$TAG_TYPES[tag_attr2]
	local attr=$FILE_DATA[attr]
	

	for i in {1..$num_items}; do
        local src="${FILE_DATA["src_$i"]}"
        local content="${FILE_DATA["content_$i"]}"
	done

	case $nested in 
		true)
			case "$attr" in
				true)
					content="<$nest_tag$nest_attr1$nest_attr2>"
					for i in {1..$num_items}; do
					content+=$(cat <<EOF

<$core_tag$tag_attr1$tag_attr2>
$(indent "${FILE_DATA["content_$i"]}" 1)
</$core_tag$>

EOF
)
					done
					content+=$(printf "\n</%s>" "$nest_tag")
					;;
				false)
					content="<$nest_tag>"
					for i in {1..$num_items}; do
					content+=$(cat <<EOF

	<$core_tag>
$(indent "${FILE_DATA["content_$i"]}" 2)
	</$core_tag>

EOF
)
					done
					content+=$(printf "\n</%s>" "$nest_tag")
					;;
			esac
			;;
		false)
			case "$attr" in
				true)
					content=""
					for i in {1..$num_items}; do
					content+=$(cat <<EOF

<$core_tag$tag_attr1$tag_attr2>
$(indent "${FILE_DATA["content_$i"]}" 1)
</$core_tag>

EOF
)
					done
					;;
				false)
					for i in {1..$num_items}; do
					content+=$(cat <<EOF

<$core_tag>
$(indent "${FILE_DATA["content_$i"]}" 1)
</$core_tag>

EOF
)
					done
					;;
			esac
			;;
	esac
	print -r -- "$content"
}

#------------------------------------------------------------------------------
# Main Program Logic
#------------------------------------------------------------------------------
main() {
    local tag_name=""
    local num_items=1
    local path_depth=0
	local filled=true
	local attr=false
    
    # Check for --help tag_name before getopts
    for arg in "$@"; do
        if [[ "$arg" == "--help" ]]; then
            usage
            exit 0
        fi
    done
    
    # Parse command line tag_names
    while getopts ":pxcziqredfbdaL:S:h" opt; do
        case $opt in
            p) tag_name="prompt" ;;
            x) tag_name="context" ;;
            c) tag_name="comment" ;;
            z) tag_name="feedback" ;;
            i) tag_name="instructions" ;;
            q) tag_name="question" ;;
            r) tag_name="revision" ;;
            e) tag_name="example" ;;
            f) tag_name="file" ;;
            d) tag_name="document" ;;
            b) tag_name="codebase" ;;
            a) tag_name="documentation" ;;
            L) path_depth=$OPTARG ;;
			F) filled="false" ;;
			A) attr=true ;;
            h) usage; exit 0 ;;
            \?) error_exit "Invalid tag_name: -$OPTARG" ;;
            :) error_exit "tag_name -$OPTARG requires an argument." ;;
        esac
    done

    # Process arguments
    shift $((OPTIND-1))
    if [[ $# -gt 0 ]]; then
        num_items=$#
    fi

    # Validate input
    [[ -z "$tag_name" ]] && error_exit "No tag type specified"

    # Initialize tag data structure
    FILE_DATA=()
    FILE_DATA[tag_name]="$tag_name"
    FILE_DATA[num_items]="$num_items"
    FILE_DATA[path_depth]="$path_depth"
    FILE_DATA[attr]="$attr"

# After FILE_DATA initialization in main():
    # Load source files if any arguments were provided
    load_src "$@" 

# Validate and setup tag type
case "$tag_name" in
    prompt)
        TAG_TYPES[nested]=false
        TAG_TYPES[core_tag]="prompt"
        TAG_TYPES[tag_attr1]=" id=\"\""
        ;;
    context|instructions|comment|feedback|question)
        TAG_TYPES[nested]=false
        TAG_TYPES[core_tag]="$tag_name"
        ;;
    revision)
        TAG_TYPES[nested]=false
        TAG_TYPES[core_tag]="revision"
        TAG_TYPES[tag_attr1]=" index=\"\""
        ;;
    document)
        TAG_TYPES[nested]=false
        TAG_TYPES[nest_tag]="documents"
        TAG_TYPES[core_tag]="document"
        TAG_TYPES[tag_attr1]=" index=\"\""
        TAG_TYPES[tag_attr2]=" source=\"\""
        ;;
    documentation)
        TAG_TYPES[nested]=true
        TAG_TYPES[nest_tag]="documentation"
        TAG_TYPES[core_tag]="document"
        TAG_TYPES[tag_attr1]=" index=\"\""
        TAG_TYPES[tag_attr2]=" source=\"\""
        ;;
    codebase)
        TAG_TYPES[nested]=true
        TAG_TYPES[nest_tag]="codebase"
        TAG_TYPES[core_tag]="file"
        TAG_TYPES[nest_attr1]=" type=\"\""
        TAG_TYPES[nest_attr2]=" id=\"\""
        TAG_TYPES[tag_attr1]=" src=\"\""
        TAG_TYPES[tag_attr2]=" language=\"\""
        ;;
    file)
        TAG_TYPES[nested]=false
        TAG_TYPES[core_tag]="file"
        TAG_TYPES[tag_attr1]=" src=\"\""
        ;;
    *)
        error_exit "Unknown tag type: $tag_name"
        ;;
esac

    # Generate and handle output
    local output=$(tag_factory "$tag_name" "$num_items")
    handle_output "$output"
}

# Execute main program
main "$@"