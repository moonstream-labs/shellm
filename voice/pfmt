#! /bin/zsh

# pfmt - Prompt Formatting Utility

set -eo pipefail

DEBUG=3 source "${XDG_CONFIG_HOME:-$HOME/.local/bin}/debug"

# Initialize global session state
typeset -A session_data=(
    [config_path]="${XDG_CONFIG_HOME:-$HOME/.config}/shellm/config.yaml"
    [input_file]=""
    [model]="Qwen/Qwen2.5-72B-Instruct-Turbo"
    [temperature]=0
)

usage() {
    cat << EOF
Usage: pfmt [options] <input_file>

Options:
    -m, --model MODEL       Specify the model to use
    -t, --temp TEMP        Set temperature (0-1, default: 0)
    -h, --help            Show this help message
EOF
}

load_config() {
    [[ -f "$session_data[config_path]" ]] || error_exit "Config file not found: $session_data[config_path]"
    
    export TOGETHER_API_KEY=$(yq '.api_keys.together.key' "$session_data[config_path]")
    [[ -n "$TOGETHER_API_KEY" ]] || error_exit "TOGETHER_API_KEY not found in config"
    debug 1 "TOGETHER_API_KEY: $TOGETHER_API_KEY"

    export GROQ_API_KEY=$(yq '.api_keys.groq.key' "$session_data[config_path]")
    [[ -n "$GROQ_API_KEY" ]] || error_exit "GROQ_API_KEY not found in config"
    debug 1 "GROQ_API_KEY: $GROQ_API_KEY"

}

process_audio() {
    local input_file="$1"
	debug 1 "Processing audio file: $input_file"
    [[ -f "$input_file" ]] || error_exit "Input file not found: $input_file"

    local result=""
    result="$(curl -s https://api.groq.com/openai/v1/audio/transcriptions \
        -H "Authorization: bearer ${GROQ_API_KEY}" \
        -F file=@"$input_file" \
        -F model=distil-whisper-large-v3-en \
        -F temperature="$session_data[temperature]" \
        -F response_format=json \
        -F language=en \
        | jq -r '.text' \
        | sed 's/^*\(.*\)*$/\1/')"
    
    echo "$result"
}

format_text() {
    local text="$1"
    local result
    
    result=$(together chat.completions \
        --model "$session_data[model]" \
        --message "system" "Your sole task is to reformat the text string provided by the user into valid Markdown format. You should correct any errors in the text, including typos, grammatical errors, and formatting issues. Any references to code libraries, functions, conventions, or other technical details should be formatted as inline code. If the user repetitively lists a series of options, you should reformat them in unordered list format. You should only respond with the formatted text, no other commentary." \
        --message "user" "$text")
    
    echo "$result"
}

main() {
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -m|--model)
                session_data[model]="$2"
                shift 2
                ;;
            -t|--temp)
                session_data[temperature]="$2"
                shift 2
                ;;
            -h|--help)
                usage
                exit 0
                ;;
            *)
                [[ -z "$session_data[input_file]" ]] && session_data[input_file]="$1"
                shift
                ;;
        esac
    done

    # Check required arguments
    [[ -z "$session_data[input_file]" ]] && error_exit "No input file specified"

    # Load configuration
    load_config
	debug 1 "Loading config..."
	debug 3 "session_data[model]: $session_data[model]"
	debug 3 "session_data[temperature]: $session_data[temperature]"
	debug 3 "session_data[input_file]: $session_data[input_file]"

    # Process audio and format text
    local transcription
    transcription=$(process_audio "$session_data[input_file]")
	debug 1 "Transcribing audio..."
	debug 2 "transcription: $transcription"
    
    local formatted_text
    formatted_text=$(format_text "$transcription")
	debug 1 "Formatting text..."
	debug 2 "formatted_text: $formatted_text"

    # Output formatted text with XML tags
	local result=""
    result=$(xtag -t prompt -H -C0 <(echo "$formatted_text"))
	debug 1 "Outputting formatted text..."
	prompt="${result%$'\n'}"
	debug 2 "prompt: $prompt"
	
    together chat.completions \
    --model Qwen/Qwen2.5-Coder-32B-Instruct \
    --message "system" "You are an expert Python programming instructor..." \
    --message "user" "$prompt" | \
    bat --color=always --wrap="auto" --unbuffered --theme="ansi" --tabs=4 --paging=never --pager "less --RAW-CONTROL-CHARS --mouse" --style="plain" -l md | \
	sed -E '/^```/,/^```/!s/\*\*//g; /^```/,/^```/!s/\*//g; /^```/,/^```/!s/####//g; /^```/,/^```/!s/###//g; /^```/,/^```/!s/##//g'
}

main "$@"